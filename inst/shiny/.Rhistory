## make heatmap
heatmap.2(geneExpression[ind,],
col=cols,
trace="none",
scale="row",
labRow=geneAnnotation$CHR[ind],
labCol=labcol,
ColSideColors=gcol,
key=FALSE)
set.seed(17)
m = nrow(geneExpression)
n = ncol(geneExpression)
x = matrix(rnorm(m*n),m,n)
g = factor(sampleInfo$g )
ph <- rowttests(t(x))
library(genefilter)
library(gplots)
library(matrixStats)
library(genefilter)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter", version = "3.8")
library(gplots)
library(matrixStats)
library(genefilter)
library(RColorBrewer)
cols = colorRampPalette(rev(brewer.pal(11,"RdBu")))(25)
ttest = rowttests(x,g)
sds = rowSds(x)
Indexes = list(t=order(ttest$p.value)[1:50], s=order(-sds)[1:50])
for(ind in Indexes){
heatmap.2(x[ind,],
col=cols,
trace="none",
scale="row",
labCol=g,
key=FALSE)
}
n = 1000
y = rbinom(n,1,0.25)
##proportion of ones Pr(Y)
sum(y==1)/length(y)
##expectaion of Y
mean(y)
n = 10000
set.seed(1)
men = rnorm(n,176,7) #height in centimeters
women = rnorm(n,162,7) #height in centimeters
y = c(rep(0,n),rep(1,n))
x = round(c(men,women))
##mix it up
ind = sample(seq(along=y))
y = y[ind]
x = x[ind]
set.seed(5)
N = 250
ind = sample(length(y),N)
Y = y[ind]
X = x[ind]
?loess
library(dagdata)
data(admissions)
print(admissions)
table(admissions)
print(admissions)
library(devtools)
install_github("genomicsclass/GSE5859")
index = which(admissions$Gender==1)
accepted= sum(admissions$Number[index] * admissions$Percent[index]/100)
applied = sum(admissions$Number[index])
accepted/applied
index = which(admissions$Gender==0)
accepted= sum(admissions$Number[index] * admissions$Percent[index]/100)
applied = sum(admissions$Number[index])
accepted/applied
index = admissions$Gender==1
men = admissions[index,]
women = admissions[!index,]
menYes = sum(men$Number*men$Percent/100)
menNo = sum(men$Number*(1-men$Percent/100))
womenYes = sum(women$Number*women$Percent/100)
womenNo = sum(women$Number*(1-women$Percent/100))
tab = matrix(c(menYes,womenYes,menNo,womenNo),2,2)
chisq.test(tab)$p.value
tab
index = admissions$Gender==1
men = admissions[index,]
women = admissions[!index,]
print( data.frame( major=admissions[1:6,1],men=men[,3], women=women[,3]) )
major = admissions[1:6,1]
men = admissions[1:6,]
women =admissions[7:12,]
H = (men$Number*men$Percent/100 + women$Number*women$Percent/100) / (men$Number+women$Number)
major[which.min(H)]
min(H)
mH = (men$Number*men$Percent/100) / (men$Number)
cor(men$Number, mH)
cor(men$Number, H)
cor(women$Number, H)
library(Biobase)
library(GSE5859)
data(GSE5859)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase", version = "3.8")
library(Biobase)
source("https://bioconductor.org/biocLite.R")
biocLite("Biobase")
BiocInstaller:biocLite("S4Vectors")
BiocInstaller::biocValid()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("S4Vectors", version = "3.8")
BiocManager::install("S4Vectors", version = "3.8")
library(S4Vectors)
BiocManager::install("S4Vectors", version = "3.8")
biocLite("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase", version = "3.8")
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
sex = sampleInfo$group
month = factor( format(sampleInfo$date,"%m"))
table( sampleInfo$group, month)
ttest = rowttests(x,g)
library(qvalue)
library(genefilter)
pvals = rowttests(geneExpression,factor(sampleInfo$g))$p.value
qvals = qvalue(pvals)$qvalues
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue", version = "3.8")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("genefu")
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg19.masked)
c17m = BSgenome.Hsapiens.UCSC.hg19.masked$chr17
c22m = BSgenome.Hsapiens.UCSC.hg19.masked$chr22
c22m
library(devtools)
install_github("genomicsclass/ph525x")
library(ph525x)
stopifnot(packageVersion("ph525x") >= "0.0.16") # do over if fail
library(ph525x)
library(ERBS)
library(Biobase)
library(hgu133a.db)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hgu133a.db", version = "3.8")
library(hgu133a.db)
library(devtools)
install_github("genomicsclass/ph525x")
library(ph525x)
esHclust = function(es) {
emat = t(exprs(es))
rownames(emat) = sampleNames(es)
dd = data.frame(emat)
dfHclust(dd)
}
library(tissuesGeneExpression)
data(tissuesGeneExpression)
tgeES = ExpressionSet(e)
annotation(tgeES) = "hgu133a.db"
pData(tgeES) = tab
featureNames(tgeES) =
make.names(mapIds(hgu133a.db, keys=featureNames(tgeES),
keytype="PROBEID", column="SYMBOL"), unique=TRUE)
sampleNames(tgeES) = make.names(tgeES$Tissue, unique=TRUE)
esHclust(tgeES[1:50,1:50])
install.packages("shiny")
library(shiny)
esHclust(tgeES[1:50,1:50])
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
shinyUI(navbarPage("otolith raster analysis",
tabPanel("Analysis parameters",
actionButton("goButton","load session to analyze"),
textOutput("session")
),
navbarMenu("NISTs",
tabPanel("Set up"
),
tabPanel("About"
)
),
navbarMenu("Samples",
tabPanel("Set up"
),
tabPanel("About"
)
)
))
#Server
shinyServer(function(input, output, session) {
output$session <- renderText(function(){
input$goButton
isolate({list.files(choose.dir())})
})
})
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton("Btn_GetFile", "Choose a file" ,
title = "Please select a file:", multiple = FALSE,
buttonType = "default", class = NULL),
textOutput("txt_file")
)
server <- function(input,output,session){
volumes = getVolumes()
observe({
shinyFileChoose(input, "Btn_GetFile", roots = volumes, session = session)
if(!is.null(input$Btn_GetFile)){
# browser()
file_selected<-parseFilePaths(volumes, input$Btn_GetFile)
output$txt_file <- renderText(as.character(file_selected$datapath))
}
})
}
shinyApp(ui = ui, server = server)
install.packages('shinyFiles')
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton("Btn_GetFile", "Choose a file" ,
title = "Please select a file:", multiple = FALSE,
buttonType = "default", class = NULL),
textOutput("txt_file")
)
server <- function(input,output,session){
volumes = getVolumes()
observe({
shinyFileChoose(input, "Btn_GetFile", roots = volumes, session = session)
if(!is.null(input$Btn_GetFile)){
# browser()
file_selected<-parseFilePaths(volumes, input$Btn_GetFile)
output$txt_file <- renderText(as.character(file_selected$datapath))
}
})
}
shinyApp(ui = ui, server = server)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton("Btn_GetFile", "Choose a file" ,
title = "Please select a file:", multiple = FALSE,
buttonType = "default", class = NULL),
textOutput("txt_file")
)
server <- function(input,output,session){
volumes = getVolumes()
observe({
shinyFileChoose(input, "Btn_GetFile", roots = volumes, session = session)
if(!is.null(input$Btn_GetFile)){
# browser()
file_selected<-parseFilePaths(volumes, input$Btn_GetFile)
output$txt_file <- renderText(as.character(file_selected$datapath))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton("Btn_GetFile", "Choose a file" ,
title = "Please select a file:", multiple = FALSE,
buttonType = "default", class = NULL),
textOutput("txt_file")
)
server <- function(input,output,session){
volumes = getVolumes()
observe({
shinyFileChoose(input, "Btn_GetFile", roots = volumes, session = session)
if(!is.null(input$Btn_GetFile)){
# browser()
file_selected<-parseFilePaths(volumes, input$Btn_GetFile)
output$txt_file <- renderText(as.character(file_selected$datapath))
}
})
}
shinyApp(ui = ui, server = server)
shinyFilesExample()
devtools::install_github("nasqar/SeuratWizard")
devtools::install_github("nasqar/SeuratWizard")
getwd()
devtools::install_github("nasqar/SeuratWizard")
rm(list = ls())
a <- "a"
rm(list = ls())
if (!require("devtools"))
install.packages("devtools")
devtools::install_github('dyxmvp/seqExplorer')
remove.packages('seqExplorer')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github('dyxmvp/seq-Explorer')
library(seqExplorer)
seqExplorer()
library(seqExplorer)
seqExplorer()
seqExplorer()
library(seqExplorer)
seqExplorer()
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "ZEB1")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "ITGA6")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "FOSL1")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "IDI1")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "TIMP1")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "HSPA5")
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "NDRG1")
rm(list=ls())
seqExplorer()
table(pbmc@ident)
pbmc <<- StashIdent(object = pbmc, save.name = "Name0")
seqExplorer()
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:15,
resolution = 0.6, print.output = FALSE)
plot1 <- TSNEPlot(object = pbmc, do.return = TRUE, no.legend = TRUE, do.label = TRUE)
plot2 <- TSNEPlot(object = pbmc, do.return = TRUE, group.by = "Name0",
no.legend = TRUE, do.label = TRUE)
plot_grid(plot1, plot2)
GenePlot(object = pbmc, gene1 = "EGFP", gene2 = "ZEB1")
?GenePlot
?FindClusters
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1")
?GenePlot
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1", do.identify = TRUE)
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1", do.identify = TRUE)
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1", do.hover =  = TRUE)
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1", do.hover = TRUE)
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "TMSB10", do.hover = TRUE)
rm(list=ls())
seqExplorer()
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1", do.hover = TRUE)
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ITGA6")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "FOSL1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "IDI1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "FOSL1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "TIMP1")
rm(list=ls())
seqExplorer()
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "TIMP1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "FOSL1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "IDI1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ITGA6")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "TMSB10")
library(seqExplorer)
seqExplorer()
seqExplorer()
pbmc <- StashIdent(object = pbmc, save.name = "Name0")
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = FALSE)
seqExplorer()
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ITGA6")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ZEB1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "CD44")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "HSPA%")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "HSPA5")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "NDRG1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ITGa6")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "ITGA6")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "FOSL1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "IDI1")
GenePlot(object = pbmc_o, gene1 = "EGFP", gene2 = "TIMP1")
seqExplorer()
?RunCCA
remove.packages("seqExplorer")
devtools::install_github('dyxmvp/seqExplorer')
27
library(seqExplorer)
seqExplorer()
seqExplorer()
library(seqExplorer)
seqExplorer()
rm(list=ls())
seqExplorer()
rm(list=ls())
seqExplorer()
remove.packages('seqExplorer')
devtools::install_github('dyxmvp/seqExplorer')
library(seqExplorer)
seqExplorer()
TSNEPlot(object = pbmc, do.return = TRUE, group.by = "ClusterNames_old",
no.legend = TRUE, do.label = TRUE)
TSNEPlot(object = pbmc, do.return = TRUE, group.by = "ClusterNames_old", do.label = TRUE, pt.size = 0.5)
TSNEPlot(object = pbmc, do.return = TRUE, group.by = "ClusterNames_old", do.label = TRUE, pt.size = 1.5)
library(seqExplorer)
seqExplorer()
seqExplorer()
library(seqExplorer)
seqExplorer()
seqExplorer()
rm(list=ls())
seqExplorer()
library(seqExplorer)
seqExplorer()
library(seqExplorer)
seqExplorer()
require(R.utils)
seqExplorer()
require(R.methodsS3)
require(R.methodsS3)
gz
gzip
?gzip
gzip()
R.utils::gzip()
setwd("G:/Google Drive/Yale/Bioinformatics/Code/seqExplorer/inst/shiny")
shiny::runApp()
